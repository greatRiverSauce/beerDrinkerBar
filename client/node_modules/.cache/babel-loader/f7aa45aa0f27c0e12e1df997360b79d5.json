{"ast":null,"code":"import _classCallCheck from \"/Users/jiaqi/Desktop/beer/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jiaqi/Desktop/beer/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jiaqi/Desktop/beer/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jiaqi/Desktop/beer/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jiaqi/Desktop/beer/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jiaqi/Desktop/beer/client/src/client/SQLInterface.jsx\";\nimport React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { InputGroup, FormGroup, FormControl, Button, Row, Col, Table } from \"react-bootstrap\";\nimport { getData } from \"./Action/sql\";\nimport connect from \"react-redux/es/connect/connect\";\n\nvar SQLInterface =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SQLInterface, _Component);\n\n  function SQLInterface() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SQLInterface);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SQLInterface)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      sql: \"\"\n    };\n\n    _this.renderTable = function () {\n      var keys;\n\n      if (_this.props.data[0]) {\n        keys = Object.keys(_this.props.data[0]);\n      }\n\n      return React.createElement(Table, {\n        striped: true,\n        bordered: true,\n        condensed: true,\n        hover: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, keys.map(function (key) {\n        return React.createElement(\"th\", {\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, key);\n      }))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, _this.props.data.map(function (line) {\n        return React.createElement(\"tr\", {\n          key: Math.random(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, keys.map(function (key, idx) {\n          return React.createElement(\"td\", {\n            key: line[key] + idx,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29\n            },\n            __self: this\n          }, line[key]);\n        }));\n      })));\n    };\n\n    return _this;\n  }\n\n  _createClass(SQLInterface, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 8,\n        mdOffset: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        type: \"text\",\n        value: this.state.sql,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            sql: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), React.createElement(InputGroup.Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.props.getData(_this2.state.sql);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Send\")))), this.props.data.length !== 0 ? this.renderTable() : React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Please write a valid sql\"))));\n    }\n  }]);\n\n  return SQLInterface;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    data: state.sql.data\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getData: getData\n  }, dispatch);\n};\n\nvar SQLInterfaceComponent = connect(mapStateToProps, mapDispatchToProps)(SQLInterface);\nexport default SQLInterfaceComponent;","map":{"version":3,"sources":["/Users/jiaqi/Desktop/beer/client/src/client/SQLInterface.jsx"],"names":["React","Component","bindActionCreators","InputGroup","FormGroup","FormControl","Button","Row","Col","Table","getData","connect","SQLInterface","state","sql","renderTable","keys","props","data","Object","map","key","line","Math","random","idx","e","setState","target","value","length","mapStateToProps","mapDispatchToProps","dispatch","SQLInterfaceComponent"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {bindActionCreators} from \"redux\";\nimport {InputGroup, FormGroup, FormControl, Button, Row, Col, Table} from \"react-bootstrap\";\nimport {getData} from \"./Action/sql\";\nimport connect from \"react-redux/es/connect/connect\";\nclass SQLInterface extends Component {\n\n    state = {\n        sql: \"\",\n    }\n\n    renderTable = () => {\n        let keys;\n        if (this.props.data[0]) {\n            keys = Object.keys(this.props.data[0]);\n        }\n        return (\n            <Table striped bordered condensed hover>\n                <thead>\n                <tr>\n                    {keys.map((key) => <th key={key}>{key}</th>)}\n                </tr>\n                </thead>\n                <tbody>\n                    {\n                        this.props.data.map(line =>\n                            <tr key={Math.random()}>\n                                {keys.map((key, idx) =>\n                                    <td key={line[key] + idx}>\n                                        {line[key]}\n                                    </td>\n                                )}\n                            </tr>\n                        )\n                    }\n                </tbody>\n            </Table>\n        )\n    }\n    render() {\n\n        return (\n            <div>\n                <Row>\n                    <Col md={8} mdOffset={2}>\n                        <FormGroup>\n                            <InputGroup>\n                                <FormControl\n                                    type=\"text\"\n                                    value={this.state.sql}\n                                    onChange={(e) => this.setState({sql: e.target.value})}\n                                />\n                                <InputGroup.Button>\n                                    <Button onClick={() => this.props.getData(this.state.sql)}>Send</Button>\n                                </InputGroup.Button>\n                            </InputGroup>\n                        </FormGroup>\n                        {this.props.data.length !== 0 ? this.renderTable() : <h2>Please write a valid sql</h2>}\n                    </Col>\n                </Row>\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    data: state.sql.data,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getData,\n}, dispatch);\n\nconst SQLInterfaceComponent = connect(mapStateToProps, mapDispatchToProps)(SQLInterface);\n\nexport default SQLInterfaceComponent;"]},"metadata":{},"sourceType":"module"}